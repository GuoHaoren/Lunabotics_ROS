"""autogenerated by genpy from lunabotics/Telemetry.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg
import lunabotics.msg
import nav_msgs.msg
import sensor_msgs.msg

class Telemetry(genpy.Message):
  _md5sum = "d0e35cb7fd7b0bb1bd91ffa77aa78063"
  _type = "lunabotics/Telemetry"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Telemetry data from Mech Interface

# Wheel rotation angles
float32 wheel_roll_angle_front_left
float32 wheel_roll_angle_front_right
float32 wheel_roll_angle_rear_left
float32 wheel_roll_angle_rear_right

# Wheel steering angles
float32 wheel_yaw_angle_front_left
float32 wheel_yaw_angle_front_right
float32 wheel_yaw_angle_rear_left
float32 wheel_yaw_angle_rear_right

# Currents of driving motors
float32 motor_driving_current_front_left
float32 motor_driving_current_front_right
float32 motor_driving_current_rear_left
float32 motor_driving_current_rear_right

# Currents of steering motors
float32 motor_steering_current_front_left
float32 motor_steering_current_front_right
float32 motor_steering_current_rear_left
float32 motor_steering_current_rear_right

float32 front_axis_tilt		# Tilt of the front wheel axis
float32 laser_tilt			# Laser tilt level

sensor_msgs/Imu imu_data	# Accelerometer + Gyro data (Orientation quaternion is not used)

BoolValue[] bumpers			# Triggered/Not triggered for each bumper

sensor_msgs/Range[] proximity_data	# Ranges for each of the proximity sensors

nav_msgs/Odometry odometry  # Odometry data

# Load information
float32[] weights			# Load info for each load sensor [kg/sensor]
float32 total_weight		# Total weight of the whole upper part
float32 regolith_weight		# Weight of the regolith in the bucket
float32 bucket_weight		# Weight of the bucket

# Battery information
float32[] voltages			# Voltage of each battery
float32[] remainings		# Remaining mA/h in each battery

# Actuators 
# TBD

================================================================================
MSG: sensor_msgs/Imu
# This is a message to hold data from an IMU (Inertial Measurement Unit)
#
# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec
#
# If the covariance of the measurement is known, it should be filled in (if all you know is the variance of each measurement, e.g. from the datasheet, just put those along the diagonal)
# A covariance matrix of all zeros will be interpreted as "covariance unknown", and to use the data a covariance will have to be assumed or gotten from some other source
#
# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation estimate), please set element 0 of the associated covariance matrix to -1
# If you are interpreting this message, please check for a value of -1 in the first element of each covariance matrix, and disregard the associated estimate.

Header header

geometry_msgs/Quaternion orientation
float64[9] orientation_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 angular_velocity
float64[9] angular_velocity_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 linear_acceleration
float64[9] linear_acceleration_covariance # Row major x, y z 

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: lunabotics/BoolValue
uint8 flag

================================================================================
MSG: sensor_msgs/Range
# Single range reading from an active ranger that emits energy and reports
# one range reading that is valid along an arc at the distance measured. 
# This message is not appropriate for fixed-range obstacle detectors, 
# such as the Sharp GP2D15. This message is also not appropriate for laser 
# scanners. See the LaserScan message if you are working with a laser scanner.

Header header    	# timestamp in the header is the time the ranger
		 	# returned the distance reading

# Radiation type enums
# If you want a value added to this list, send an email to the ros-users list
uint8 ULTRASOUND=0
uint8 INFRARED=1

uint8 radiation_type    # the type of radiation used by the sensor
		 	# (sound, IR, etc) [enum]

float32 field_of_view   # the size of the arc that the distance reading is
		 	# valid for [rad]
		 	# the object causing the range reading may have
		 	# been anywhere within -field_of_view/2 and
		 	# field_of_view/2 at the measured range. 
                        # 0 angle corresponds to the x-axis of the sensor.

float32 min_range       # minimum range value [m]
float32 max_range       # maximum range value [m]

float32 range           # range data [m]
		 	# (Note: values < range_min or > range_max
		 	# should be discarded)

================================================================================
MSG: nav_msgs/Odometry
# This represents an estimate of a position and velocity in free space.  
# The pose in this message should be specified in the coordinate frame given by header.frame_id.
# The twist in this message should be specified in the coordinate frame given by the child_frame_id
Header header
string child_frame_id
geometry_msgs/PoseWithCovariance pose
geometry_msgs/TwistWithCovariance twist

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertianty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into it's linear and angular parts. 
Vector3  linear
Vector3  angular

"""
  __slots__ = ['wheel_roll_angle_front_left','wheel_roll_angle_front_right','wheel_roll_angle_rear_left','wheel_roll_angle_rear_right','wheel_yaw_angle_front_left','wheel_yaw_angle_front_right','wheel_yaw_angle_rear_left','wheel_yaw_angle_rear_right','motor_driving_current_front_left','motor_driving_current_front_right','motor_driving_current_rear_left','motor_driving_current_rear_right','motor_steering_current_front_left','motor_steering_current_front_right','motor_steering_current_rear_left','motor_steering_current_rear_right','front_axis_tilt','laser_tilt','imu_data','bumpers','proximity_data','odometry','weights','total_weight','regolith_weight','bucket_weight','voltages','remainings']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','sensor_msgs/Imu','lunabotics/BoolValue[]','sensor_msgs/Range[]','nav_msgs/Odometry','float32[]','float32','float32','float32','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       wheel_roll_angle_front_left,wheel_roll_angle_front_right,wheel_roll_angle_rear_left,wheel_roll_angle_rear_right,wheel_yaw_angle_front_left,wheel_yaw_angle_front_right,wheel_yaw_angle_rear_left,wheel_yaw_angle_rear_right,motor_driving_current_front_left,motor_driving_current_front_right,motor_driving_current_rear_left,motor_driving_current_rear_right,motor_steering_current_front_left,motor_steering_current_front_right,motor_steering_current_rear_left,motor_steering_current_rear_right,front_axis_tilt,laser_tilt,imu_data,bumpers,proximity_data,odometry,weights,total_weight,regolith_weight,bucket_weight,voltages,remainings

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Telemetry, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.wheel_roll_angle_front_left is None:
        self.wheel_roll_angle_front_left = 0.
      if self.wheel_roll_angle_front_right is None:
        self.wheel_roll_angle_front_right = 0.
      if self.wheel_roll_angle_rear_left is None:
        self.wheel_roll_angle_rear_left = 0.
      if self.wheel_roll_angle_rear_right is None:
        self.wheel_roll_angle_rear_right = 0.
      if self.wheel_yaw_angle_front_left is None:
        self.wheel_yaw_angle_front_left = 0.
      if self.wheel_yaw_angle_front_right is None:
        self.wheel_yaw_angle_front_right = 0.
      if self.wheel_yaw_angle_rear_left is None:
        self.wheel_yaw_angle_rear_left = 0.
      if self.wheel_yaw_angle_rear_right is None:
        self.wheel_yaw_angle_rear_right = 0.
      if self.motor_driving_current_front_left is None:
        self.motor_driving_current_front_left = 0.
      if self.motor_driving_current_front_right is None:
        self.motor_driving_current_front_right = 0.
      if self.motor_driving_current_rear_left is None:
        self.motor_driving_current_rear_left = 0.
      if self.motor_driving_current_rear_right is None:
        self.motor_driving_current_rear_right = 0.
      if self.motor_steering_current_front_left is None:
        self.motor_steering_current_front_left = 0.
      if self.motor_steering_current_front_right is None:
        self.motor_steering_current_front_right = 0.
      if self.motor_steering_current_rear_left is None:
        self.motor_steering_current_rear_left = 0.
      if self.motor_steering_current_rear_right is None:
        self.motor_steering_current_rear_right = 0.
      if self.front_axis_tilt is None:
        self.front_axis_tilt = 0.
      if self.laser_tilt is None:
        self.laser_tilt = 0.
      if self.imu_data is None:
        self.imu_data = sensor_msgs.msg.Imu()
      if self.bumpers is None:
        self.bumpers = []
      if self.proximity_data is None:
        self.proximity_data = []
      if self.odometry is None:
        self.odometry = nav_msgs.msg.Odometry()
      if self.weights is None:
        self.weights = []
      if self.total_weight is None:
        self.total_weight = 0.
      if self.regolith_weight is None:
        self.regolith_weight = 0.
      if self.bucket_weight is None:
        self.bucket_weight = 0.
      if self.voltages is None:
        self.voltages = []
      if self.remainings is None:
        self.remainings = []
    else:
      self.wheel_roll_angle_front_left = 0.
      self.wheel_roll_angle_front_right = 0.
      self.wheel_roll_angle_rear_left = 0.
      self.wheel_roll_angle_rear_right = 0.
      self.wheel_yaw_angle_front_left = 0.
      self.wheel_yaw_angle_front_right = 0.
      self.wheel_yaw_angle_rear_left = 0.
      self.wheel_yaw_angle_rear_right = 0.
      self.motor_driving_current_front_left = 0.
      self.motor_driving_current_front_right = 0.
      self.motor_driving_current_rear_left = 0.
      self.motor_driving_current_rear_right = 0.
      self.motor_steering_current_front_left = 0.
      self.motor_steering_current_front_right = 0.
      self.motor_steering_current_rear_left = 0.
      self.motor_steering_current_rear_right = 0.
      self.front_axis_tilt = 0.
      self.laser_tilt = 0.
      self.imu_data = sensor_msgs.msg.Imu()
      self.bumpers = []
      self.proximity_data = []
      self.odometry = nav_msgs.msg.Odometry()
      self.weights = []
      self.total_weight = 0.
      self.regolith_weight = 0.
      self.bucket_weight = 0.
      self.voltages = []
      self.remainings = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_18f3I.pack(_x.wheel_roll_angle_front_left, _x.wheel_roll_angle_front_right, _x.wheel_roll_angle_rear_left, _x.wheel_roll_angle_rear_right, _x.wheel_yaw_angle_front_left, _x.wheel_yaw_angle_front_right, _x.wheel_yaw_angle_rear_left, _x.wheel_yaw_angle_rear_right, _x.motor_driving_current_front_left, _x.motor_driving_current_front_right, _x.motor_driving_current_rear_left, _x.motor_driving_current_rear_right, _x.motor_steering_current_front_left, _x.motor_steering_current_front_right, _x.motor_steering_current_rear_left, _x.motor_steering_current_rear_right, _x.front_axis_tilt, _x.laser_tilt, _x.imu_data.header.seq, _x.imu_data.header.stamp.secs, _x.imu_data.header.stamp.nsecs))
      _x = self.imu_data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4d.pack(_x.imu_data.orientation.x, _x.imu_data.orientation.y, _x.imu_data.orientation.z, _x.imu_data.orientation.w))
      buff.write(_struct_9d.pack(*self.imu_data.orientation_covariance))
      _x = self
      buff.write(_struct_3d.pack(_x.imu_data.angular_velocity.x, _x.imu_data.angular_velocity.y, _x.imu_data.angular_velocity.z))
      buff.write(_struct_9d.pack(*self.imu_data.angular_velocity_covariance))
      _x = self
      buff.write(_struct_3d.pack(_x.imu_data.linear_acceleration.x, _x.imu_data.linear_acceleration.y, _x.imu_data.linear_acceleration.z))
      buff.write(_struct_9d.pack(*self.imu_data.linear_acceleration_covariance))
      length = len(self.bumpers)
      buff.write(_struct_I.pack(length))
      for val1 in self.bumpers:
        buff.write(_struct_B.pack(val1.flag))
      length = len(self.proximity_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.proximity_data:
        _v1 = val1.header
        buff.write(_struct_I.pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_B4f.pack(_x.radiation_type, _x.field_of_view, _x.min_range, _x.max_range, _x.range))
      _x = self
      buff.write(_struct_3I.pack(_x.odometry.header.seq, _x.odometry.header.stamp.secs, _x.odometry.header.stamp.nsecs))
      _x = self.odometry.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.odometry.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.odometry.pose.pose.position.x, _x.odometry.pose.pose.position.y, _x.odometry.pose.pose.position.z, _x.odometry.pose.pose.orientation.x, _x.odometry.pose.pose.orientation.y, _x.odometry.pose.pose.orientation.z, _x.odometry.pose.pose.orientation.w))
      buff.write(_struct_36d.pack(*self.odometry.pose.covariance))
      _x = self
      buff.write(_struct_6d.pack(_x.odometry.twist.twist.linear.x, _x.odometry.twist.twist.linear.y, _x.odometry.twist.twist.linear.z, _x.odometry.twist.twist.angular.x, _x.odometry.twist.twist.angular.y, _x.odometry.twist.twist.angular.z))
      buff.write(_struct_36d.pack(*self.odometry.twist.covariance))
      length = len(self.weights)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.weights))
      _x = self
      buff.write(_struct_3f.pack(_x.total_weight, _x.regolith_weight, _x.bucket_weight))
      length = len(self.voltages)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.voltages))
      length = len(self.remainings)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.remainings))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.imu_data is None:
        self.imu_data = sensor_msgs.msg.Imu()
      if self.bumpers is None:
        self.bumpers = None
      if self.proximity_data is None:
        self.proximity_data = None
      if self.odometry is None:
        self.odometry = nav_msgs.msg.Odometry()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.wheel_roll_angle_front_left, _x.wheel_roll_angle_front_right, _x.wheel_roll_angle_rear_left, _x.wheel_roll_angle_rear_right, _x.wheel_yaw_angle_front_left, _x.wheel_yaw_angle_front_right, _x.wheel_yaw_angle_rear_left, _x.wheel_yaw_angle_rear_right, _x.motor_driving_current_front_left, _x.motor_driving_current_front_right, _x.motor_driving_current_rear_left, _x.motor_driving_current_rear_right, _x.motor_steering_current_front_left, _x.motor_steering_current_front_right, _x.motor_steering_current_rear_left, _x.motor_steering_current_rear_right, _x.front_axis_tilt, _x.laser_tilt, _x.imu_data.header.seq, _x.imu_data.header.stamp.secs, _x.imu_data.header.stamp.nsecs,) = _struct_18f3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu_data.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.imu_data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.imu_data.orientation.x, _x.imu_data.orientation.y, _x.imu_data.orientation.z, _x.imu_data.orientation.w,) = _struct_4d.unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.orientation_covariance = _struct_9d.unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.imu_data.angular_velocity.x, _x.imu_data.angular_velocity.y, _x.imu_data.angular_velocity.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.angular_velocity_covariance = _struct_9d.unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.imu_data.linear_acceleration.x, _x.imu_data.linear_acceleration.y, _x.imu_data.linear_acceleration.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.linear_acceleration_covariance = _struct_9d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bumpers = []
      for i in range(0, length):
        val1 = lunabotics.msg.BoolValue()
        start = end
        end += 1
        (val1.flag,) = _struct_B.unpack(str[start:end])
        self.bumpers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.proximity_data = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.Range()
        _v3 = val1.header
        start = end
        end += 4
        (_v3.seq,) = _struct_I.unpack(str[start:end])
        _v4 = _v3.stamp
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.frame_id = str[start:end].decode('utf-8')
        else:
          _v3.frame_id = str[start:end]
        _x = val1
        start = end
        end += 17
        (_x.radiation_type, _x.field_of_view, _x.min_range, _x.max_range, _x.range,) = _struct_B4f.unpack(str[start:end])
        self.proximity_data.append(val1)
      _x = self
      start = end
      end += 12
      (_x.odometry.header.seq, _x.odometry.header.stamp.secs, _x.odometry.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odometry.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.odometry.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odometry.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.odometry.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.odometry.pose.pose.position.x, _x.odometry.pose.pose.position.y, _x.odometry.pose.pose.position.z, _x.odometry.pose.pose.orientation.x, _x.odometry.pose.pose.orientation.y, _x.odometry.pose.pose.orientation.z, _x.odometry.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 288
      self.odometry.pose.covariance = _struct_36d.unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.odometry.twist.twist.linear.x, _x.odometry.twist.twist.linear.y, _x.odometry.twist.twist.linear.z, _x.odometry.twist.twist.angular.x, _x.odometry.twist.twist.angular.y, _x.odometry.twist.twist.angular.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 288
      self.odometry.twist.covariance = _struct_36d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.weights = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.total_weight, _x.regolith_weight, _x.bucket_weight,) = _struct_3f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.voltages = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.remainings = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_18f3I.pack(_x.wheel_roll_angle_front_left, _x.wheel_roll_angle_front_right, _x.wheel_roll_angle_rear_left, _x.wheel_roll_angle_rear_right, _x.wheel_yaw_angle_front_left, _x.wheel_yaw_angle_front_right, _x.wheel_yaw_angle_rear_left, _x.wheel_yaw_angle_rear_right, _x.motor_driving_current_front_left, _x.motor_driving_current_front_right, _x.motor_driving_current_rear_left, _x.motor_driving_current_rear_right, _x.motor_steering_current_front_left, _x.motor_steering_current_front_right, _x.motor_steering_current_rear_left, _x.motor_steering_current_rear_right, _x.front_axis_tilt, _x.laser_tilt, _x.imu_data.header.seq, _x.imu_data.header.stamp.secs, _x.imu_data.header.stamp.nsecs))
      _x = self.imu_data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4d.pack(_x.imu_data.orientation.x, _x.imu_data.orientation.y, _x.imu_data.orientation.z, _x.imu_data.orientation.w))
      buff.write(self.imu_data.orientation_covariance.tostring())
      _x = self
      buff.write(_struct_3d.pack(_x.imu_data.angular_velocity.x, _x.imu_data.angular_velocity.y, _x.imu_data.angular_velocity.z))
      buff.write(self.imu_data.angular_velocity_covariance.tostring())
      _x = self
      buff.write(_struct_3d.pack(_x.imu_data.linear_acceleration.x, _x.imu_data.linear_acceleration.y, _x.imu_data.linear_acceleration.z))
      buff.write(self.imu_data.linear_acceleration_covariance.tostring())
      length = len(self.bumpers)
      buff.write(_struct_I.pack(length))
      for val1 in self.bumpers:
        buff.write(_struct_B.pack(val1.flag))
      length = len(self.proximity_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.proximity_data:
        _v5 = val1.header
        buff.write(_struct_I.pack(_v5.seq))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_B4f.pack(_x.radiation_type, _x.field_of_view, _x.min_range, _x.max_range, _x.range))
      _x = self
      buff.write(_struct_3I.pack(_x.odometry.header.seq, _x.odometry.header.stamp.secs, _x.odometry.header.stamp.nsecs))
      _x = self.odometry.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.odometry.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.odometry.pose.pose.position.x, _x.odometry.pose.pose.position.y, _x.odometry.pose.pose.position.z, _x.odometry.pose.pose.orientation.x, _x.odometry.pose.pose.orientation.y, _x.odometry.pose.pose.orientation.z, _x.odometry.pose.pose.orientation.w))
      buff.write(self.odometry.pose.covariance.tostring())
      _x = self
      buff.write(_struct_6d.pack(_x.odometry.twist.twist.linear.x, _x.odometry.twist.twist.linear.y, _x.odometry.twist.twist.linear.z, _x.odometry.twist.twist.angular.x, _x.odometry.twist.twist.angular.y, _x.odometry.twist.twist.angular.z))
      buff.write(self.odometry.twist.covariance.tostring())
      length = len(self.weights)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.weights.tostring())
      _x = self
      buff.write(_struct_3f.pack(_x.total_weight, _x.regolith_weight, _x.bucket_weight))
      length = len(self.voltages)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.voltages.tostring())
      length = len(self.remainings)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.remainings.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.imu_data is None:
        self.imu_data = sensor_msgs.msg.Imu()
      if self.bumpers is None:
        self.bumpers = None
      if self.proximity_data is None:
        self.proximity_data = None
      if self.odometry is None:
        self.odometry = nav_msgs.msg.Odometry()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.wheel_roll_angle_front_left, _x.wheel_roll_angle_front_right, _x.wheel_roll_angle_rear_left, _x.wheel_roll_angle_rear_right, _x.wheel_yaw_angle_front_left, _x.wheel_yaw_angle_front_right, _x.wheel_yaw_angle_rear_left, _x.wheel_yaw_angle_rear_right, _x.motor_driving_current_front_left, _x.motor_driving_current_front_right, _x.motor_driving_current_rear_left, _x.motor_driving_current_rear_right, _x.motor_steering_current_front_left, _x.motor_steering_current_front_right, _x.motor_steering_current_rear_left, _x.motor_steering_current_rear_right, _x.front_axis_tilt, _x.laser_tilt, _x.imu_data.header.seq, _x.imu_data.header.stamp.secs, _x.imu_data.header.stamp.nsecs,) = _struct_18f3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu_data.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.imu_data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.imu_data.orientation.x, _x.imu_data.orientation.y, _x.imu_data.orientation.z, _x.imu_data.orientation.w,) = _struct_4d.unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.orientation_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.imu_data.angular_velocity.x, _x.imu_data.angular_velocity.y, _x.imu_data.angular_velocity.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.angular_velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.imu_data.linear_acceleration.x, _x.imu_data.linear_acceleration.y, _x.imu_data.linear_acceleration.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.linear_acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bumpers = []
      for i in range(0, length):
        val1 = lunabotics.msg.BoolValue()
        start = end
        end += 1
        (val1.flag,) = _struct_B.unpack(str[start:end])
        self.bumpers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.proximity_data = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.Range()
        _v7 = val1.header
        start = end
        end += 4
        (_v7.seq,) = _struct_I.unpack(str[start:end])
        _v8 = _v7.stamp
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.frame_id = str[start:end].decode('utf-8')
        else:
          _v7.frame_id = str[start:end]
        _x = val1
        start = end
        end += 17
        (_x.radiation_type, _x.field_of_view, _x.min_range, _x.max_range, _x.range,) = _struct_B4f.unpack(str[start:end])
        self.proximity_data.append(val1)
      _x = self
      start = end
      end += 12
      (_x.odometry.header.seq, _x.odometry.header.stamp.secs, _x.odometry.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odometry.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.odometry.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odometry.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.odometry.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.odometry.pose.pose.position.x, _x.odometry.pose.pose.position.y, _x.odometry.pose.pose.position.z, _x.odometry.pose.pose.orientation.x, _x.odometry.pose.pose.orientation.y, _x.odometry.pose.pose.orientation.z, _x.odometry.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 288
      self.odometry.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 48
      (_x.odometry.twist.twist.linear.x, _x.odometry.twist.twist.linear.y, _x.odometry.twist.twist.linear.z, _x.odometry.twist.twist.angular.x, _x.odometry.twist.twist.angular.y, _x.odometry.twist.twist.angular.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 288
      self.odometry.twist.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.weights = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 12
      (_x.total_weight, _x.regolith_weight, _x.bucket_weight,) = _struct_3f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.voltages = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.remainings = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_6d = struct.Struct("<6d")
_struct_36d = struct.Struct("<36d")
_struct_9d = struct.Struct("<9d")
_struct_3f = struct.Struct("<3f")
_struct_3I = struct.Struct("<3I")
_struct_B4f = struct.Struct("<B4f")
_struct_4d = struct.Struct("<4d")
_struct_7d = struct.Struct("<7d")
_struct_2I = struct.Struct("<2I")
_struct_18f3I = struct.Struct("<18f3I")
_struct_3d = struct.Struct("<3d")
