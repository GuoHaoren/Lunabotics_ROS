"""autogenerated by genpy from lunabotics/Control.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Control(genpy.Message):
  _md5sum = "3e600b4d0c3f992c329b395d11c7539a"
  _type = "lunabotics/Control"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Control topic fed into mechanical interface

uint8 control_type	#0 - motion only, 1 - actuator only, 2 - both
geometry_msgs/Twist motion	#2D simple motion

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into it's linear and angular parts. 
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['control_type','motion']
  _slot_types = ['uint8','geometry_msgs/Twist']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       control_type,motion

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Control, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.control_type is None:
        self.control_type = 0
      if self.motion is None:
        self.motion = geometry_msgs.msg.Twist()
    else:
      self.control_type = 0
      self.motion = geometry_msgs.msg.Twist()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B6d.pack(_x.control_type, _x.motion.linear.x, _x.motion.linear.y, _x.motion.linear.z, _x.motion.angular.x, _x.motion.angular.y, _x.motion.angular.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.motion is None:
        self.motion = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 49
      (_x.control_type, _x.motion.linear.x, _x.motion.linear.y, _x.motion.linear.z, _x.motion.angular.x, _x.motion.angular.y, _x.motion.angular.z,) = _struct_B6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B6d.pack(_x.control_type, _x.motion.linear.x, _x.motion.linear.y, _x.motion.linear.z, _x.motion.angular.x, _x.motion.angular.y, _x.motion.angular.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.motion is None:
        self.motion = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 49
      (_x.control_type, _x.motion.linear.x, _x.motion.linear.y, _x.motion.linear.z, _x.motion.angular.x, _x.motion.angular.y, _x.motion.angular.z,) = _struct_B6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B6d = struct.Struct("<B6d")
