#!/bin/bash 

################################### Functions ##########################
kill_if_running() {
	[ "$1" = "" ]  && return 0
	pid_to_kill=`pidof $1`
	if [ $pid_to_kill ]
	then
		echo "Killing $1 (pid $pid_to_kill)"
		killall -s 2 $1
	fi
}

clrecho() {
	echo "$(tput setaf $1)$(tput bold)$2$(tput sgr0)"
}

kill_nodes() {
	clrecho 3 "Killing nodes..."
	kill_if_running "luna_gui_listener"
	kill_if_running "luna_gui_gw"
	kill_if_running "luna_driver"
	kill_if_running "luna_slam"
	kill_if_running "luna_mech_gw"
	kill_if_running "luna_aut_gw"
	kill_if_running "luna_fear"
	echo "-------------------------"
}
	

########################################################################

rebuild=1
build=0
in_port="5555"
in_addr=0
out_port="5556"
out_addr="192.168.218.1"
profile="VMWare"

while getopts "a:p:A:P:cdnbr:" opt; 
do	
	case $opt in
	a)	in_addr="$OPTARG";;
	p)	in_port="$OPTARG";;
	A)	out_addr="$OPTARG";;
	P)	out_port="$OPTARG";;
	c)	close=1;;
	d)  clean=1;;
	b)	build=1;;
	n)  rebuild=0;;
	r)	profile="$OPTARG";;
	\?) echo "$(tput bold)Usage: $0 [-b] [-d] [-c] [-n] [-h] [-a <incomming IP address>] [-p <incomming port>] [-A <outgoing IP address>] [-P <outgoing port>]$(tput sgr0)" >&2
		echo ""$(tput sgr0)
		echo "Options:"
		echo "-b					Build without running"
		echo "-d					Delete build target before compiling"
		echo "-c					Close running nodes. All other options are ignored when using -c"
		echo "-n					Do not recompile"
		echo "-a ADDR					Specify GUI IP address"
		echo "-A ADDR					Specify IP address for incoming connections"
		echo "-p PORT					Specify GUI TCP port"
		echo "-P ADDR					Specify TCP port for incoming connections"
		echo "-r PROFILE				Specify profile to be used (VMWare/Pionner/Elias)"
		exit 1;;
	esac
done
shift $((OPTIND-1))

if [ $close ]
then
	kill_nodes
else	
	if [ `pgrep -n roscore` ] || [ $build -eq 1 ]
	then
		if [ $build -eq 0 ]
		then
			kill_nodes
		fi
		halt=0
		if [ $rebuild -eq 1 ]
		then
			if [ $clean ]
			then
				clrecho 3 "Cleaning targets..."
				cd `rospack find lunabotics`
				make clean
			fi
			clrecho 3 "Building package..."
			rosmake lunabotics
			halt=$?
			if [ $halt -ne 0 ]
			then
				clrecho 1 "Build failed"
			fi
		fi
		
		if [ $halt -eq 0 ]
		then
			if [ $build -eq 1 ]
			then
				clrecho 2 "Build complete"
			else
				if [ $in_addr -eq 0 ]
				then
					if [ $profile = "Pioneer" ]
					then
						out_addr="192.168.1.113"
						in_addr=`/sbin/ifconfig wlan0 | grep "inet " | cut -d ':' -f2 | awk '{print $1}'`
					else
						in_addr=`ifconfig eth0 | grep "inet " | cut -d ':' -f2 | awk '{print $1}'`
					fi
				fi
				if [ $in_addr ]
				then
					clrecho 3 "Launching nodes..."
					echo "Using incoming connection $in_addr:$in_port"
					echo "Using outgoing connection $out_addr:$out_port"
					if [ $profile = "Pioneer" ]
					then
						roscd lunabotics
						roslaunch lunabotics.launch iip:=$in_addr oip:=$out_addr iport:=$in_port oport:=$out_port
					else
						gnome-terminal --tab -t "GUI Gateway" -e "bash rosrun lunabotics luna_gui_gw '$out_addr' '$out_port'" --tab -t "GUI Listener" -e "bash rosrun lunabotics luna_gui_listener '$in_addr' '$in_port'"
						gnome-terminal --tab -t "MECH Gateway" -e "bash rosrun lunabotics luna_mech_gw" --tab -t "SLAM" -e "bash rosrun lunabotics luna_slam" --tab -t "Driver" -e "bash rosrun lunabotics luna_driver" #--tab -t "AUTSYS Gateway" -e "bash rosrun lunabotics luna_aut_gw" #--tab -t "Emergency behavior" -e "bash rosrun lunabotics luna_fear"
					fi
					clrecho 2 "Nodes are up and running. Enjoy! :)"
				else
					clrecho 1 "Cannot find network"
				fi
			fi
		fi
	else
		clrecho 1 "Roscore is not running!!!"
	fi
fi
